module sicas.fonts;

enum auto fonts =
[
	"default": Font(
		"adefhjnrtABEFHJLNQRT3478",
		[ '#': 0x903030C0 ],
		[
			"........|.....##.|........|..####..|##......|.....#..|........|........|.#......|...##...|######..|########|########|###..###|.#######|##......|###..###|.#####..|######..|########|.#####..|.....##.|#######.|.#####..",
			"........|......#.|........|.#....#.|.#......|.....#..|........|........|.#......|..#..#..|.#....#.|.#.....#|.#.....#|.#....#.|......#.|.#......|.##...#.|#.....#.|.#....#.|#..#...#|#.....#.|....#.#.|#.....#.|#.....#.",
			"........|......#.|........|.#......|.#......|........|........|........|.#......|..#..#..|.#....#.|.#..#...|.#......|.#....#.|......#.|.#......|.#.#..#.|#.....#.|.#....#.|...#....|......#.|...#..#.|.....#..|#.....#.",
			".#####..|.####.#.|.#####..|######..|.#.###..|...####.|#.####..|#.####..|######..|.#....#.|.#####..|.####...|.####...|.######.|......#.|.#......|.#.#..#.|#.....#.|.#....#.|...#....|....##..|..#...#.|.....#..|.#####..",
			"......#.|#....##.|#.....#.|.#......|.##...#.|......#.|.#....#.|.#....#.|.#......|.#....#.|.#....#.|.#..#...|.#......|.#....#.|......#.|.#......|.#..#.#.|#.....#.|.#####..|...#....|......#.|.#....#.|....#...|#.....#.",
			".####.#.|#.....#.|#######.|.#......|.#....#.|......#.|.#....#.|.#......|.#......|.######.|.#....#.|.#......|.#......|.#....#.|#.....#.|.#....#.|.#..#.#.|#.....#.|.#..#...|...#....|......#.|.#######|....#...|#.....#.",
			"#....##.|#....##.|#.......|.#......|.#....#.|......#.|.#....#.|.#......|.#....#.|.#....#.|.#....#.|.#.....#|.#......|.#....#.|#.....#.|.#....#.|.#...##.|.#####..|.#...#..|...#....|#.....#.|......#.|...#....|#.....#.",
			".####.#.|.####..#|.######.|###.....|###..###|#.....#.|###..###|###.....|..####..|###..###|######..|########|###.....|###..###|.#####..|#######.|###..###|..#.....|###...##|..###...|.#####..|.....###|...#....|.#####..",
			"........|........|........|........|........|.#####..|........|........|........|........|........|........|........|........|........|........|........|...####.|........|........|........|........|........|........"
		]
	)
];

import std.string : indexOf;
import std.array : split;

struct Font
{
public:
	this(in char[] glyphs, in uint[char] colors, in char[][] glyphMatrix, in char separator = '|')
	{
		colors_ 	= cast(uint[char]) colors;
		this.glyphs	= glyphs;
		this.height	= cast(ubyte) glyphMatrix.length;
		this.width	= cast(ubyte) glyphMatrix[0].indexOf(separator);
		
		uint glyph, row;
		
		foreach(glyphMatrixRow; glyphMatrix)
		{
			glyph = 0;
			
			foreach(glyphRow; split(glyphMatrixRow, separator))
			{
				if(!(this.glyphs[glyph] in glyphMap_))
				   glyphMap_[this.glyphs[glyph]] = new char[][this.height];
				   
				glyphMap_[this.glyphs[glyph]][row] = glyphRow.dup;
				glyph++;
			}
			
			row++;
		}
	}
	
	char[][][] glyphRGBA(in char c) const @safe
	in { assert(c in glyphMap_); }
	body
	{
		char[][][] rgba = new char[][][this.height];
		foreach(h; 0 .. this.height) rgba[h] = new char[][this.width];
		
		for(uint y; y < this.height; ++y)
		{
			for(uint x; x < this.width; ++x)
			{
				if(glyphMap_[c][y][x] in colors_)
				{
					uint color = colors_[glyphMap_[c][y][x]];
					rgba[y][x] = [ (color >> 24) & 0xFF, (color >> 16) & 0xFF, (color >> 8) & 0xFF, color & 0xFF ];
				}
				else rgba[y][x] = [ 0x00, 0x00, 0x00, 0x00 ];
			}
		}
		
		return rgba;
	}
	
private:
	uint[char]		colors_;
	char[][][char]	glyphMap_;
	
public:
	const char[]	glyphs;
	const ubyte		height;
	const ubyte		width;
}
